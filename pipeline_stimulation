import tkinter as tk
from tkinter import ttk, messagebox
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np


class PipeFlowAnalyzer:
    def __init__(self, root):
        self.root = root
        self.root.title("Pipe Flow Analyzer")
        self.root.geometry("900x700")

        # Frames
        self.input_frame = ttk.Frame(self.root, padding=10)
        self.input_frame.pack(fill=tk.BOTH, side=tk.LEFT, expand=True)

        self.graph_frame = ttk.Frame(self.root, padding=10)
        self.graph_frame.pack(fill=tk.BOTH, side=tk.RIGHT, expand=True)

        # Input Widgets
        ttk.Label(self.input_frame, text="Pipe Length (m):").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.length_entry = ttk.Entry(self.input_frame)
        self.length_entry.grid(row=0, column=1)

        ttk.Label(self.input_frame, text="Pipe Diameter (m):").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.diameter_entry = ttk.Entry(self.input_frame)
        self.diameter_entry.grid(row=1, column=1)

        ttk.Label(self.input_frame, text="Velocity (m/s):").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.velocity_entry = ttk.Entry(self.input_frame)
        self.velocity_entry.grid(row=2, column=1)

        ttk.Label(self.input_frame, text="Density (kg/m³):").grid(row=3, column=0, sticky=tk.W, pady=2)
        self.density_entry = ttk.Entry(self.input_frame)
        self.density_entry.grid(row=3, column=1)

        ttk.Label(self.input_frame, text="Viscosity (Pa·s):").grid(row=4, column=0, sticky=tk.W, pady=2)
        self.viscosity_entry = ttk.Entry(self.input_frame)
        self.viscosity_entry.grid(row=4, column=1)

        ttk.Label(self.input_frame, text="Elevation Change (m):").grid(row=5, column=0, sticky=tk.W, pady=2)
        self.elevation_entry = ttk.Entry(self.input_frame)
        self.elevation_entry.grid(row=5, column=1)

        ttk.Label(self.input_frame, text="Pipe Material:").grid(row=6, column=0, sticky=tk.W, pady=2)
        self.material_var = tk.StringVar(value="Steel")
        self.material_combo = ttk.Combobox(self.input_frame, textvariable=self.material_var, state="readonly")
        self.material_combo["values"] = ["Steel", "PVC", "Concrete", "Copper", "Cast Iron"]
        self.material_combo.grid(row=6, column=1)

        ttk.Label(self.input_frame, text="Number of Bends:").grid(row=7, column=0, sticky=tk.W, pady=2)
        self.bends_scale = ttk.Scale(self.input_frame, from_=0, to=10, orient=tk.HORIZONTAL)
        self.bends_scale.grid(row=7, column=1)

        # Output Box
        ttk.Label(self.input_frame, text="Output:").grid(row=8, column=0, sticky=tk.W, pady=10)
        self.output_text = tk.Text(self.input_frame, height=10, width=50)
        self.output_text.grid(row=9, column=0, columnspan=2)

        # Buttons
        self.calculate_button = ttk.Button(self.input_frame, text="Calculate", command=self.calculate_losses)
        self.calculate_button.grid(row=10, column=0, columnspan=2, pady=10)

    def reynolds_number(self, velocity, diameter, kinematic_viscosity):
        return velocity * diameter / kinematic_viscosity

    def friction_factor(self, reynolds_number, roughness, diameter):
        if reynolds_number < 2300:
            return 64 / reynolds_number
        else:
            # Colebrook-White approximation
            return 0.25 / (np.log10(roughness / (3.7 * diameter) + 5.74 / reynolds_number**0.9))**2

    def calculate_losses(self):
        try:
            self.output_text.delete(1.0, "end")

            # Read inputs
            length = float(self.length_entry.get())
            diameter = float(self.diameter_entry.get())
            velocity = float(self.velocity_entry.get())
            density = float(self.density_entry.get())
            viscosity = float(self.viscosity_entry.get())
            material = self.material_var.get()
            elevation_change = float(self.elevation_entry.get())
            num_bends = int(self.bends_scale.get())

            # Material roughness lookup
            roughness = {
                "Steel": 0.00015,
                "PVC": 0.0000015,
                "Concrete": 0.0006,
                "Copper": 0.0000015,
                "Cast Iron": 0.00085
            }.get(material, 0.00015)

            # Constants
            g = 9.81  # Gravity (m/s^2)
            local_loss_coefficient = 0.5  # Approximate K for bends

            # Discretize pipe
            segments = 1000
            dx = length / segments
            distances = np.linspace(0, length, segments)
            pressures = [101325]  # Start at atmospheric pressure
            elevations = np.linspace(0, elevation_change, segments)
            pressure_losses = []

            for i in range(1, segments):
                # Calculate Reynolds number
                re = self.reynolds_number(velocity, diameter, viscosity / density)

                # Calculate friction factor
                f = self.friction_factor(re, roughness, diameter)

                # Calculate frictional pressure loss
                dp_friction = f * (density * velocity**2 / 2) * (dx / diameter)

                # Calculate elevation pressure change
                dp_elevation = -density * g * (elevations[i] - elevations[i - 1])

                # Calculate local losses from bends
                dp_local = num_bends * local_loss_coefficient * (density * velocity**2 / 2) / segments

                # Total pressure loss
                dp_total = dp_friction + dp_elevation + dp_local
                pressure_losses.append(dp_total)

                # Append cumulative pressure
                pressures.append(pressures[-1] + dp_total)

            # Update text output
            self.output_text.insert("end", f"Final Pressure: {pressures[-1]:.2f} Pa\n")

            # Plot updated results
            self.plot_results(distances, pressures, pressure_losses)
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def plot_results(self, distances: np.ndarray, pressures: list, pressure_losses: list):
        for widget in self.graph_frame.winfo_children():
            widget.destroy()

        fig, ax = plt.subplots(figsize=(10, 6), dpi=100)
        
        # Plot pressure along the pipe
        ax.plot(distances, pressures, 'b-', label="Cumulative Pressure")
        ax.set_xlabel("Distance (m)")
        ax.set_ylabel("Pressure (Pa)")
        ax.set_title("Pressure Profile Along the Pipe")
        ax.grid(True, linestyle='--', alpha=0.7)
        ax.legend(loc='upper right')

        # Plot pressure loss per segment
        ax2 = ax.twinx()
        ax2.plot(distances[1:], pressure_losses, 'r--', label="Pressure Loss/Segment")
        ax2.set_ylabel("Pressure Loss (Pa)")
        ax2.legend(loc='lower right')

        canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack(fill=tk.BOTH, expand=True)
        canvas.draw()


if __name__ == "__main__":
    root = tk.Tk()
    app = PipeFlowAnalyzer(root)
    root.mainloop()
